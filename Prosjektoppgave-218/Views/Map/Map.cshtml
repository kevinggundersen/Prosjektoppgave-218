@{
    ViewData["Title"] = "Kart";
}

<div class="container-fluid" id="mapcontainer">
    <h1></h1>

    <div id="map" style="height: 600px; width: 100%;"></div>
</div>

@section Styles {
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
          crossorigin="" />

    <!-- Leaflet Control Geocoder CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
}

@section Scripts {
    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
            integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
            crossorigin=""></script>

    <!-- Leaflet Control Geocoder plugin -->
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>

    <!-- Proj4 and Proj4Leaflet for reprojecting EPSG:32633 → EPSG:4326 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.8.0/proj4.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.9.0/proj4.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/proj4leaflet/1.0.2/proj4leaflet.js"></script>

    <script>
        // Define UTM zone 33N projection
        proj4.defs("EPSG:32633", "+proj=utm +zone=33 +datum=WGS84 +units=m +no_defs");
        // Define EPSG:25832 projection (for your new layers)
        proj4.defs("EPSG:25832", "+proj=utm +zone=32 +ellps=GRS80 +units=m +no_defs");

        console.log("Map script loaded");

        // Initialize map
        var map = L.map('map').setView([58.1633, 8.0025], 8);

        // Helper for WMS GetFeatureInfo
        function getFeatureInfoUrl(map, latlng, baseUrl, options) {
            const point = map.latLngToContainerPoint(latlng, map.getZoom());
            const size = map.getSize();
            const params = {
                request: 'GetFeatureInfo',
                service: 'WMS',
                srs: 'EPSG:3857',
                styles: '',
                transparent: true,
                version: '1.3.0',
                format: 'image/png',
                bbox: map.getBounds().toBBoxString(),
                height: size.y,
                width: size.x,
                layers: options.layers,
                query_layers: options.query_layers,
                info_format: options.info_format,
                i: Math.floor(point.x),
                j: Math.floor(point.y)
            };
            return baseUrl + L.Util.getParamString(params, baseUrl, true);
        }

        // Base layers
        var kartverket = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topo/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 19,
            attribution: '&copy; Kartverket'
        }).addTo(map);


        var matrikkelkart = L.tileLayer.wms('https://wms.geonorge.no/skwms1/wms.matrikkelkart', {
            layers: 'Matrikkelkart',
            format: 'image/png',
            transparent: true,
            attribution: '&copy; Kartverket'
        }).addTo(map);

        var elveg2 = L.tileLayer.wms('https://wms.geonorge.no/skwms1/wms.vegnett2', {
            layers: 'vegnett2',
            format: 'image/png',
            transparent: true,
            attribution: '&copy; Kartverket'
        }).addTo(map);

        // Layer control
        var baseMaps = { "Kartverket": kartverket };
        var overlayMaps = {
            "Matrikkelkart": matrikkelkart,
            "Vegnett":elveg2
        };
        var layerControl = L.control.layers(baseMaps, overlayMaps).addTo(map);

        // Flood zones layer with on-the-fly reprojection
        var floodLayer = L.layerGroup().addTo(map);
        layerControl.addOverlay(floodLayer, 'Flomsoner');

        // helper to request only the current bbox
        function loadFloodInView() {
            const b = map.getBounds();
            const sw = b.getSouthWest();
            const ne = b.getNorthEast();

            console.log(`Fetching flood data for bounds: SW(${sw.lng}, ${sw.lat}), NE(${ne.lng}, ${ne.lat})`);
            fetch(`/Map/FloodInView?minx=${sw.lng}&miny=${sw.lat}&maxx=${ne.lng}&maxy=${ne.lat}`)
                .then(r => {
                    console.log("Flood data request successful:", r);
                    return r.json();
                })
                .then(fc => {
                    console.log("Flood GeoJSON received:", fc);
                    floodLayer.clearLayers();
                    L.geoJSON(fc, {
                        coordsToLatLng: coords => {
                            var p = proj4('EPSG:32633', 'EPSG:4326', coords);
                            return L.latLng(p[1], p[0]);
                        },
                        style: { color: '#0077be', weight: 2, fillOpacity: 0.4 },
                        onEachFeature: (f, layer) =>
                            layer.bindPopup(`<b>Zone ID:</b> ${f.properties.fid}`)
                    }).addTo(floodLayer);
                    console.log('Flood layer added to map.');
                })
                .catch(err => console.error('Flood In-View load error', err));
        }

        // load initially
        loadFloodInView();

        // reload each time the user pans or zooms
        map.on('moveend', loadFloodInView);

        // Geocoder control
        var geocoder = L.Control.geocoder({ defaultMarkGeocode: false, placeholder: "Søk..." })
            .addTo(map);
        geocoder.getContainer().setAttribute('title', 'Søk etter steder');
        geocoder.on('markgeocode', function (e) {
            map.setView(e.geocode.center, 16);
            L.marker(e.geocode.center).addTo(map)
                .bindPopup(e.geocode.name).openPopup();
        });

        // (Optional) Your WFS and click‐to‐info code can follow here…
        function transformCoordinates(feature) {
            if (feature.geometry && feature.geometry.coordinates) {
                if (feature.geometry.type === 'Point') {
                    const transformed = proj4("EPSG:25832", "EPSG:4326", feature.geometry.coordinates);
                    feature.geometry.coordinates = [transformed[0], transformed[1]];
                    console.log("Transformed Point:", feature.geometry.coordinates);
                } else if (feature.geometry.type === 'Polygon' || feature.geometry.type === 'MultiPolygon') {
                    feature.geometry.coordinates = feature.geometry.coordinates.map(level1 => {
                        return level1.map(level2 => {
                            return level2.map(coord => {
                                const transformed = proj4("EPSG:25832", "EPSG:4326", coord);
                                return [transformed[0], transformed[1]];
                            });
                        });
                    });
                    console.log("Transformed Polygon/MultiPolygon:", feature.geometry.coordinates);
                }
            }
            return feature;
        }

        function addGeoJsonLayer(url, layerName, color) {
            console.log(`Fetching ${layerName} data from: ${url}`);
            fetch(url)
                .then(response => {
                    console.log(`${layerName} data request successful:`, response);
                    return response.json();
                })
                .then(data => {
                    console.log(`${layerName} GeoJSON received:`, data);
                    if (data && data.features) {
                        console.log(`Processing ${data.features.length} features for ${layerName}`);
                        data.features = data.features.map(transformCoordinates);
                        L.geoJSON(data, {
                            style: {
                                color: color,
                                weight: 1,
                                opacity: 0.8,
                                fillOpacity: 0.3
                            },
                            onEachFeature: function (feature, layer) {
                                if (feature.properties && feature.properties.id) {
                                    layer.bindPopup(`${layerName} ID: ${feature.properties.id}`);
                                }
                            }
                        }).addTo(map);
                        console.log(`${layerName} layer added to map.`);
                    } else {
                        console.error(`Invalid GeoJSON format for ${layerName}`, data);
                    }
                })
                .catch(error => {
                    console.error(`Error fetching ${layerName} data:`, error);
                });
        }

        // Add the new layers
        addGeoJsonLayer('/Map/SykehusGeoJson', 'Sykehus', 'blue');
        addGeoJsonLayer('/Map/PolitiFengselGeoJson', 'Politi/Fengsel', 'green');
        addGeoJsonLayer('/Map/BrannAmbulanseGeoJson', 'Brann/Ambulanse', 'red');
    </script>


}
